- name: Create a VM with security configuration
  hosts: localhost
  gather_facts: no
  vars:
    vm_datacenter: lab
    vm_cluster: cluster01
    vm_folder: /{{ vm_datacenter }}/vm/
    vm_name: test_vm_01
    vm_cpu: 1
    vm_mem: 256
    vm_datastore: datastore1
    vm_network: DPortGroup1
  tasks:
  - name: Check for existing VM with the same name
    vmware_guest_facts:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      datacenter: "{{ vm_datacenter }}"
      validate_certs: no
      name: "{{ vm_name }}"
    ignore_errors: True
    register: vm_find
  - name: Fail if VM already exists
    fail:
      msg: "The VM already exists."
    when: vm_find is succeeded 
  - name: Create new VM - {{ vm_name }}
    vmware_guest:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        datacenter: "{{ vm_datacenter }}"
        cluster: "{{ vm_cluster }}"
        validate_certs: no
        folder: "{{ vm_folder }}"
        name: "{{ vm_name }}" 
        state: poweredoff
        guest_id: rhel7_64Guest
        datastore: "{{ vm_datastore }}"
        disk:
          - size_gb: 10
        hardware:
            memory_mb: "{{ vm_mem }}"
            memory_reservation: "{{ (vm_mem / 2) | int }}"
            num_cpus: "{{ vm_cpu }}"
            cpu_reservation: "{{ (vm_cpu * 256) | int }}"
            scsi: paravirtual
            boot_firmware: efi
        networks:
          - name: "{{ vm_network }}"
            device_type: vmxnet3
        customvalues:
          - key: "isolation.tools.copy.disable"
            value: "True"
          - key: "isolation.tools.paste.disable"
            value: "True"
          - key: "isolation.tools.diskShrink.disable"
            value: "True"
          - key: "isolation.tools.diskWiper.disable"
            value: "True"
          - key: "mks.enable3d"
            value: "False"
          - key: "tools.setInfo.sizeLimit"
            value: "1048576"
          - key: "RemoteDisplay.vnc.enabled"
            value: "False"
          - key: "tools.guestlib.enableHostInfo"
            value: "False"
        wait_for_ip_address: no
    register: vm_deploy
  - name: Enable UEFI SecureBoot for {{ vm_name }}
    vmware_guest_boot_manager:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      validate_certs: no
      uuid: '{{ vm_deploy.instance.hw_product_uuid }}'
      secure_boot_enabled: True